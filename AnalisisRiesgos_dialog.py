# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AnalisisRiesgosDialog
                                 A QGIS plugin
 Analisis de Riesgo inundacion por cercanía
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-08
        git sha              : $Format:%H$
        copyright            : (C) 2020 by César Cortés
        email                : cbcortesr@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from PyQt5.QtWidgets import QTableWidgetItem
from numpy import double
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.utils import iface
from PyQt5.QtCore import QVariant
from PyQt5.QtGui import QColor
import os # This is is needed in the pyqgis console also
import qgis.core
import random
from qgis.core import (
    QgsProject
)
from qgis.core import (
    QgsVectorLayer, QgsDataItem
)
from qgis.core import (
    QgsProcessingFeatureSourceDefinition, QgsCategorizedSymbolRenderer, QgsStyle, QgsSymbol,
    QgsRendererCategory, QgsSimpleFillSymbolLayer, QgsStatisticalSummary
)

# sys.path.append("C:\Archivos de programa\JetBrains\PyCharm2019.1.1\debug-eggs\pydevd-pycharm.egg")
# import pydevd

import processing

from qgis.core import Qgis

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'AnalisisRiesgos_dialog_base.ui'))


class AnalisisRiesgosDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(AnalisisRiesgosDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.btn_comprobar.clicked.connect(self.recogerRuta)
        self.btn_carga.clicked.connect(self.cargadatos)

        #self.btn_carga.clicked.connect(self.cargadata)
        self.selector.setFilter("Delimitado por ' ; '(*.csv)")
        # Realizamos un fitro para linitar tipo de archivo
        self.btn_geoproc.clicked.connect(self.geoproceso1)
        # Se llama el metodo geoproceso
        #self.opendir.clicked.connect(self.selectDirectory())
        self.btn_geoproc_2.clicked.connect(self.geoproceso2)
        # Se llama el metodo geoproceso2

    def recogerRuta(self):
        # if self.txt_ruta.setText(str(self.selector.filePath())) True
        csvPath = str(self.selector.filePath())
        # self.lineEdit.setText(csvPath)
        shp1Path = str(self.sel_cruce.filePath())
        shp2Path = str(self.sel_base.filePath())

        datos = "Ok"
        if csvPath != "":  # Verifico si se cargó el archivo CSV

            if shp1Path != "":  # Verifico si se cargó el archivo CSV

                if shp2Path != "":  # Verifico si se cargó el archivo CSV
                    QMessageBox.information(self, "Mensaje de Comprobacion", "Comprobación Exitosa")

                else:
                    QMessageBox.warning(self, "Mensaje de Error",
                                        "No lee la ruta del archivo base")
                    datos = "Fallo"
            else:
                QMessageBox.critical(self, "Mensaje de Error", "No lee la ruta del archivo de cruce")
                datos = "Fallo"
        else:
            QMessageBox.information(self, "Mensaje de Error", "No lee la ruta se lee")
            datos = "Fallo"

        if datos == "Fallo":
            self.btn_carga.setEnabled(False)
        else:
            # Si las condiciones de carga se cumplieron activo el siguiente grupo de procesos
            self.btn_carga.setEnabled(True)
            self.btn_geoproc.setEnabled(True)

            # self.error_carga()
        # Coloco la ruta seleccionada en el cuadro de texto, convertida en string

    def cargadatos(self):
        rutaDP = str(self.sel_base.filePath())
        lydepto = QgsVectorLayer(rutaDP, "Departamentos", "ogr")
        QgsProject.instance().addMapLayer(lydepto)

        csvPath = str(self.selector.filePath())
        print(csvPath)
        uri = "file:///" + csvPath + "?delimiter=;&crs=EPSG:4686&xField=LONGITUD&yField=LATITUD&decimalPoint=,"

        vlayer = QgsVectorLayer(uri, 'Ptos Colegios', "delimitedtext")
        print(len(list(vlayer.getFeatures())))
        QgsProject.instance().addMapLayer(vlayer)

        # rutaRL = "D:\Pruebas\Shape\River_lines.shp"
        rutaRL = str(self.sel_cruce.filePath())  # asigno la ruta del layer de ríos según eleccion del usuario
        lyrios = QgsVectorLayer(rutaRL, "Rios Evaluación", "ogr")
        QgsProject.instance().addMapLayer(lyrios)

    def geoproceso1(self):

        global Riesgo
        buff = 0.1
        if self.btns_alto.isChecked():
            buff = 0.008
            self.label_4.setText("Riesgo Alto")
            riesgo = "Alto"
        elif self.btns_medio.isChecked():
            buff = 0.009
            self.label_4.setText("Riesgo Medio")
            riesgo = "Medio"
        elif self.btns_medio.isChecked():
            buff = 0.010
            self.label_4.setText("Riesgo Bajo")
            riesgo = "Bajo"

        # Acondicionado de ejercicios propuestos para la materia del Programación Open Source – Maestría USAL

        layer = iface.activeLayer()
        file_output = 'D:/Pruebas/Shape/lin_buffer1.shp'
        title = "Geoprocesamiento:Buffer"
        processing.run('native:buffer', {'INPUT': layer,
                                         'DISTANCE': buff,
                                         'SEGMENTS': 10,
                                         'DISSOLVE': True,
                                         'END_CAP_STYLE': 0,
                                         'JOIN_STYLE': 0,
                                         'MITER_LIMIT': 10,
                                         'OUTPUT': file_output})
        lyrBuffer = QgsVectorLayer(file_output, "lin_buffer1", "ogr")
        if lyrBuffer.isValid():
            QgsProject.instance().addMapLayers([lyrBuffer])
            # Agrega la capa generada al proyecto actual
            lyrBuffer.setOpacity(50)
            iface.mapCanvas().setExtent(lyrBuffer.extent())
            msg = "Buffer generado correctamente para riesgo "+ riesgo
            self.btn_geoproc_2.setEnabled(True)
            QMessageBox.information(iface.mainWindow(), title, msg)
        else:
            msg = "El Buffer no se ha podido generar"
            QMessageBox.information(iface.mainWindow(), title, msg)
        # layer = iface.activeLayer("Rios Evaluación")

    def geoproceso2 (self):

       # -*- coding: utf-8 -*
        '''***********************************************************************************************
            CBC INCORPORACION
            Adaptación de script:
         ***********************************************************************************************'''
       #pydevd.settrace('localhost', port=54100, stdoutToServer=True, stderrToServer=True)

        '''Primero creo una capa en la memoria para asignar los objetos que sean seleccionados desde la base
           Esta capa no contendrá los mismo campos solo:
            IdCole, COD_SEDE,  NombreSEDE, Coord_X y Coord_Y
        '''

        # Referencia de código en: https://gis.stackexchange.com/questions/168266/pyqgis-a-geometry-intersectsb-geometry-wouldnt-find-any-intersections
        #def crealayer():
        qg=qgis.core
    # Creación de la capa en memoria# Hago la lectura de las capas activas
        mapcanvas1 = iface.mapCanvas()
    # Asigno las capas activas a una lista denominada "layers"
        layers = mapcanvas1.layers()
        ly_intersect = qg.QgsVectorLayer("Point?crs=EPSG:4686", "Colegios en Riesgo", "memory")
    # Definicion de los campos que llevará el layer "ly_intersect
        IdColeg = qg.QgsField("IdColeg", QVariant.Int)
        CodSede = qg.QgsField("Cod_Sede", QVariant.String)
        NomCole = qg.QgsField("NombreColegio", QVariant.String)
        Coord_X = qg.QgsField("Coord_X", QVariant.Double)
        Coord_Y = qg.QgsField("Coord_Y", QVariant.Double)
    # Ahora asigno campos que llevará el layer "ly_intersect
        ly_intersect.dataProvider().addAttributes([IdColeg, CodSede, NomCole, Coord_X, Coord_Y])
        ly_intersect.updateFields()
    # Verificación de la generación de los campos
    #ly_intersect.fields().toList()
    #ly_intersect.fields().toList()[1].name()

    # Ahora genero una variable par apoder hacer  la edición directa del layer
        provider = ly_intersect.dataProvider
    #campos = provider.fields()
        seleccion = []
        # Declaro los layer en una lista
        cont=1
        for f in layers[2].getFeatures(): # Layer 2 es Puntos Colegio
            for a in layers[0].getFeatures():
                if a.geometry().intersects(f.geometry()):
                    # Valida si los elementos de las dos capas se intersectan, de ser así lo cargará en una nueva capa
                    interseccion = a.geometry().intersection(f.geometry())
                    #Creo un elemento de tipo QgsFeature para alimentarlo con los valores del elemento
                    elemento = qg.QgsFeature()
                    elemento.setFields(ly_intersect.fields())
                    elemento.setGeometry(interseccion)
                    # Busco el cada atributo del elemento "f" de la intersección y los asigno a la variable correspondiente
                    elemento.setAttribute("IdColeg", cont) #
                    elemento.setAttribute("Cod_Sede", f.attributes()[6])
                    elemento.setAttribute("NombreColegio", f.attributes()[10])
                    elemento.setAttribute("Coord_X", f.attributes()[12]) # Longitud
                    elemento.setAttribute("Coord_Y", f.attributes()[11]) # Latitud
                    print(f.attributes()[10])
                    # Ahora los agrego a la capa de memoria
                    cont =cont+1
                    seleccion.append(elemento)
        ly_intersect.dataProvider().addFeatures(seleccion)
        #msg = "Se ha generado la capa - Colegios en Riesgo - correctamente"
        #QMessageBox.information(iface.mainWindow(), title, msg)
        ly_intersect.updateExtents()
        QgsProject.instance().addMapLayer(ly_intersect)  # Agrego la capa ColRiesgo al proyecto
        print(len(seleccion))
        print(layers[2].selectedFeatureCount())
        # Establece la cuenta de elementos que cruzan
        print(layers[0].featureCount())